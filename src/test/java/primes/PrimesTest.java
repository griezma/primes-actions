/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package primes;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.*;
import static primes.Primes.isPrime;
import static primes.Primes.nextPrime;

@DisplayName("Testing primes")
class PrimesTest {

    @ParameterizedTest(name = "next prime of {0} should be {1}")
    @CsvSource({"0, 2", "2, 3", "3, 5", "4, 5", "5, 7", "29, 31", "30, 31"})
    void testNextPrime(int from, int expected) {
        assertEquals(expected, Primes.nextPrime(from));
    }

    @ParameterizedTest(name = "number {0} supposed to be prime {1}")
    @CsvSource({ "1, false", "2, true", "3, true", "4, false", "47, true", "49, false", "51, false", "53, true" })
    void isPrimesShouldResolveAsExpected(int number, boolean expected) {
        assertThat(isPrime(number), is(expected));
    }

    @Test
    @Timeout(1)
    void testPrimeGenerator() {
        Iterator<Number> iterator = new PrimeGenerator(0).iterator();
        int n = 1000;
        while (n-- > 0) {
            assertTrue(org.apache.commons.math3.primes.Primes.isPrime(iterator.next().intValue()));
        }
    }

    @Test
    @Timeout(1)
    void testObservable() {
        new PrimeGenerator(0).observable()
                .map(Number::intValue)
                .map(org.apache.commons.math3.primes.Primes::isPrime)
                .take(10000)
                .subscribe(org.junit.jupiter.api.Assertions::assertTrue);
    }

    @Test
    void testPrimeFactors() {
        assertAll(
                () -> assertEquals(Collections.emptyList(), Primes.factors(1)),
                () -> assertEquals(List.of(3L), Primes.factors(3)),
                () -> assertEquals(List.of(2L, 2L), Primes.factors(4)),
                () -> assertEquals(List.of(2L, 3L), Primes.factors(6)),
                () -> assertEquals(List.of(2L, 5L), Primes.factors(10)),
                () -> assertEquals(List.of(11L), Primes.factors(11)),
                () -> assertEquals(List.of(3L, 17L), Primes.factors(51)),
                () -> assertEquals(List.of(3L, 7L, 13L), Primes.factors(273))
        );
    }

    @ParameterizedTest
    @Timeout(1)
    @ValueSource(longs = { 999999997L })
    void primeFactorOfBigPrime(long number) {
        var primes = (Primes.factors(number));
        System.out.println("factors of " + number + ": " +  primes);

        assertFalse(primes.isEmpty());

        Collection<Number> factorsNotPrime = primes.stream()
                .map(Number::intValue)
                .filter(n -> !org.apache.commons.math3.primes.Primes.isPrime(n))
                .collect(Collectors.toList());

        assertTrue(factorsNotPrime.isEmpty(), factorsNotPrime.toString());
    }
}
